<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RWTHMoodleClient</name>
    </assembly>
    <members>
        <member name="T:RWTHMoodleClient.AuthenticationManager">
            <summary>
            The Authentication Management for the API
            
            Usually, you want to use StartAuthenticationProcess
            </summary>
        </member>
        <member name="T:RWTHMoodleClient.AuthenticationManager.AuthenticationState">
            <summary>
            Current state of the authentication
            </summary>
        </member>
        <member name="F:RWTHMoodleClient.AuthenticationManager.AuthenticationState.NONE">
            <summary>
            Not Authenticated, no Refresh Token known
            </summary>
        </member>
        <member name="F:RWTHMoodleClient.AuthenticationManager.AuthenticationState.ACTIVE">
            <summary>
            Not necessarily authenticated at the moment, but can re-authenticate by getting an access Token using the refresh token or holding valid token at the moment
            </summary>
        </member>
        <member name="F:RWTHMoodleClient.AuthenticationManager.AuthenticationState.WAITING">
            <summary>
            There is an ongoing Authentication process (e.g. a user needs to confirm authorization in the browser
            </summary>
        </member>
        <member name="P:RWTHMoodleClient.AuthenticationManager.State">
            <summary>
            Storing the representation of the actual authentication state - You may want to change that depending on your Device
            </summary>
        </member>
        <member name="M:RWTHMoodleClient.AuthenticationManager.CheckState">
            <summary>
            Forces the Manager to refresh the State and tries to regenerate an accessToken if possible
            </summary>
        </member>
        <member name="T:RWTHMoodleClient.AuthenticationManager.NotAuthorizedException">
            <summary>
            An Exception for Indicating problem with the authorization state
            </summary>
        </member>
        <member name="M:RWTHMoodleClient.AuthenticationManager.CheckAccessToken">
            <summary>
            Checks the AccessToken against the tokenInfo REST-Service.
            If it fails, the system tries to refresh using the authentication manager
            If it still fails, accessToken is removed automatically
            </summary>
        </member>
        <member name="M:RWTHMoodleClient.AuthenticationManager.StartAuthenticationProcess">
            <summary>
            Starts the Autehntication Process
            </summary>
            <returns>returns the verification URL for this app or an empty string on fails</returns>
        </member>
        <member name="M:RWTHMoodleClient.AuthenticationManager.CheckAuthenticationProgress">
            <summary>
            Checks whether the users has already authenticated the app (Part of the Authentication process!)
            </summary>
            <returns></returns>
        </member>
        <member name="M:RWTHMoodleClient.AuthenticationManager.OAuthInitCall">
            <summary>
            Initiates the Authorization process
            </summary>
            <returns>The answer on the Initial Call to Endpoint or an empty answer if something went wrong! (having a status field Fail: (Error message) )</returns>
        </member>
        <member name="M:RWTHMoodleClient.AuthenticationManager.TokenCall">
            <summary>
            Calls the /token Endpoint to check status of authorization process
            </summary>
            <returns>The answer to the Call or an artificial answer containing an Error Descripstion in the status-field</returns>
        </member>
        <member name="M:RWTHMoodleClient.AuthenticationManager.ExpireThread">
            <summary>
            A sinple method that will reset the State to NONE after (expireTime) seconds
            </summary>
        </member>
        <member name="M:RWTHMoodleClient.AuthenticationManager.GenerateAccessTokenFromRefreshToken">
            <summary>
            Uses the current RefreshToken to get an Access Token
            </summary>
            <returns>true, if the call was successfull</returns>
        </member>
        <member name="T:RWTHMoodleClient.Config">
            <summary>
            Central Configuration
            </summary>
        </member>
        <member name="F:RWTHMoodleClient.Config.ClientID">
            <summary>
            Add your Developer Client ID in here
                Please remember: Never commit your ID!
            </summary>
        </member>
        <member name="P:RWTHMoodleClient.Config.ConfigStorage">
            <summary>
            The Storage method for Config to be used
            Set this to your persistent storage implementation
            </summary>
        </member>
        <member name="T:RWTHMoodleClient.IConfigStorage">
            <summary>
            BAsic interface for (Config) Data Storage
            </summary>
        </member>
        <member name="M:RWTHMoodleClient.IConfigStorage.GetValue(System.String)">
            <summary>
            Gets the value of a config element
            </summary>
        </member>
        <member name="M:RWTHMoodleClient.IConfigStorage.SetValue(System.String,System.String)">
            <summary>
            Sets a new Value for a config element
            </summary>
        </member>
        <member name="T:RWTHMoodleClient.DefaultConfigStorage">
            <summary>
            Default Storage for Config.
            Data is stored in memory and lost after app is closed
            </summary>
        </member>
        <member name="M:RWTHMoodleClient.DefaultConfigStorage.GetValue(System.String)">
            <summary>
            Gets Value from memory
            </summary>
        </member>
        <member name="M:RWTHMoodleClient.DefaultConfigStorage.SetValue(System.String,System.String)">
            <summary>
            Sets new value in the memory
            </summary>
        </member>
        <member name="T:RWTHMoodleClient.OAuthRequestData">
            <summary>
            The basic response on starting an authorization process (Call to /code )
            </summary>
        </member>
        <member name="T:RWTHMoodleClient.OAuthTokenRequestData">
            <summary>
            The response on a authorization token request. (Call to /token )
            </summary>
        </member>
        <member name="T:RWTHMoodleClient.OAuthTokenRequestSendData">
            <summary>
            The datatype that is send to the Token endpoint for checking authorization status
            </summary>
        </member>
        <member name="T:RWTHMoodleClient.OAuthTokenInfo">
            <summary>
            The response to the TokenInfo request (/tokeninfo)
            </summary>
        </member>
        <member name="T:RWTHMoodleClient.MoodleBaseResponse">
            <summary>
            Common structure for Moodle API responses
            </summary>
        </member>
        <member name="T:RWTHMoodleClient.Api.RESTClient">
            <summary>
            Contains Generic and API Rest Calls
            </summary>
        </member>
        <member name="M:RWTHMoodleClient.Api.RESTClient.RestCallAsync``1(System.String,System.String,System.Boolean)">
            <summary>
            A generic REST-Call to an endpoint using GET or POST method
            
            Uses a WebRequest for POST, a httpClient for GET calls
            
            throws an Exception in Case of Error
            </summary>
            <typeparam name="T1">The Datatype to await for response</typeparam>
            <param name="input">the data as string (ignored, if using GET)</param>
            <param name="endpoint">The REST-Endpoint to call</param>
            <param name="post">A flag indicating whether to use POST or GET</param>
            <returns>The datatype that has been awaited for the call or default(T1) on error</returns>
        </member>
        <member name="M:RWTHMoodleClient.Api.RESTClient.MoodleGetEnrolledCourses(System.String,System.Int32)">
            <summary>
            Gets the Course information of currently enrolled courses
            </summary>
            <param name="semester">semester for filtering (see doc)</param>
            <param name="semesterOffset">offset for semester search (see doc)</param>
        </member>
        <member name="M:RWTHMoodleClient.Api.RESTClient.MoodleGetEnrolledCourseById(System.Int32)">
            <summary>
            Gets Information about specific course
            </summary>
            <param name="courseid">the id of the course</param>
        </member>
        <member name="M:RWTHMoodleClient.Api.RESTClient.MoodleGetFiles(System.Int32,System.String)">
            <summary>
            Gets the available files in a course room
            </summary>
            <param name="courseid">id of the course</param>
            <param name="topicname">(optional) filter for topics</param>
        </member>
        <member name="M:RWTHMoodleClient.Api.RESTClient.MoodleDownloadFile(System.String)">
            <summary>
            Downloads a file from Moodle
            
            File is returned as stream. For unavailable files or invalid urls, stream is empty
            </summary>
            <param name="downloadUrl">Url to file in moodle</param>
        </member>
        <member name="M:RWTHMoodleClient.Api.RESTClient.CheckValidToken">
            <summary>
            Workaround:
            Check the Token for being valid by calling the Moodle Api (Only in case of errors of the tokeninfo-endpoint)
            </summary>
            <returns>true, if the token seems to be valid</returns>
        </member>
        <member name="M:RWTHMoodleClient.Api.RESTClient.OAuthTokenInfo">
            <summary>
            Gets information about the current Token
            </summary>
        </member>
    </members>
</doc>
